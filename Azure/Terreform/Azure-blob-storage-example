 Below is a basic example of a Terraform script to create an Azure Storage Account with a Blob Container. Before you run the script, ensure you have the Azure CLI installed and you are logged in.

```hcl
provider "azurerm" {
  features = {}
}

resource "azurerm_resource_group" "example" {
  name     = "example-resource-group"
  location = "East US"
}

resource "azurerm_storage_account" "example" {
  name                     = "examplestorageaccount"
  resource_group_name      = azurerm_resource_group.example.name
  location                 = azurerm_resource_group.example.location
  account_tier             = "Standard"
  account_replication_type = "LRS"
}

resource "azurerm_storage_container" "example" {
  name                  = "examplecontainer"
  storage_account_name  = azurerm_storage_account.example.name
  container_access_type = "private"
}

output "storage_account_primary_access_key" {
  value = azurerm_storage_account.example.primary_access_key
}

output "storage_account_primary_blob_endpoint" {
  value = azurerm_storage_account.example.primary_blob_endpoint
}
```

This script creates a resource group, a storage account, and a blob container. Make sure to customize the values according to your needs. To use this script:

1. Save it to a file with a `.tf` extension, like `main.tf`.
2. Run `terraform init` in the same directory to initialize Terraform.
3. Run `terraform apply` and confirm to apply the changes.

Remember to treat sensitive information, such as access keys, carefully, and consider using Terraform variables or other methods to manage secrets securely.

This is a simple example, and you may want to explore additional configurations based on your specific requirements, like setting up network rules, enabling diagnostics, or using specific access controls. Refer to the [Azure Provider documentation](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/storage_account) for more details and options.
