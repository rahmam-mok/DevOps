To use Certbot to manage an SSL certificate for AWS Load Balancer (ALB or NLB), follow these steps:

Step 1: Set Up an EC2 Instance for Certbot

Since AWS Load Balancers don’t support automatic Let’s Encrypt (Certbot) integration, you’ll need to generate the certificate on an EC2 instance and upload it to AWS Certificate Manager (ACM) or use it directly on the Load Balancer.
	1.	Launch an EC2 instance (Ubuntu or Amazon Linux).
	2.	SSH into the instance and install Certbot.

sudo apt update && sudo apt install -y certbot

For Amazon Linux:

sudo yum install -y certbot

Step 2: Generate an SSL Certificate

You must prove ownership of your domain using DNS or HTTP validation.

Option 1: DNS Challenge (Recommended for Load Balancers)

If you’re using Route 53, Certbot can update DNS records automatically.
	1.	Install the Route 53 plugin:

sudo apt install -y python3-certbot-dns-route53


	2.	Request a wildcard certificate:

sudo certbot certonly --dns-route53 -d example.com -d "*.example.com"

	•	Replace example.com with your domain.

Option 2: HTTP Challenge (If You Have a Web Server)
	1.	Run Certbot with:

sudo certbot certonly --standalone -d example.com -d www.example.com

	•	Ensure ports 80/443 are open on your EC2 instance.

Step 3: Upload the Certificate to AWS ACM

Once Certbot issues the certificate, upload it to AWS ACM or use it with an ELB.
	1.	Extract the certificate details:

sudo cat /etc/letsencrypt/live/example.com/fullchain.pem
sudo cat /etc/letsencrypt/live/example.com/privkey.pem


	2.	Upload to AWS ACM using the AWS CLI:

aws acm import-certificate --certificate file://fullchain.pem \
   --private-key file://privkey.pem \
   --certificate-chain file://chain.pem \
   --region your-region


	3.	Attach the ACM certificate to the Load Balancer via the AWS Console or CLI.

Step 4: Automate Renewal and Upload

Let’s Encrypt certificates expire every 90 days. Automate renewal using a cron job:

echo "0 0 * * 1 certbot renew --deploy-hook 'aws acm import-certificate --certificate file://fullchain.pem --private-key file://privkey.pem --certificate-chain file://chain.pem --region your-region'" | sudo tee -a /etc/crontab

Would you like help automating the upload using AWS Lambda instead?

To automate the renewal and upload of your Let’s Encrypt SSL certificate to AWS ACM using AWS Lambda, follow these steps:

Step 1: Set Up Certbot on an EC2 Instance

Ensure Certbot is installed and running on your EC2 instance:

sudo apt update && sudo apt install -y certbot

For Amazon Linux:

sudo yum install -y certbot

Step 2: Create a Script to Renew and Upload the Certificate

Create a script (renew_cert.sh) that:
	•	Renews the SSL certificate
	•	Uploads it to an S3 bucket (Lambda will retrieve it from there)

#!/bin/bash

DOMAIN="example.com"
S3_BUCKET="your-s3-bucket"
CERT_PATH="/etc/letsencrypt/live/$DOMAIN"
AWS_REGION="your-region"

# Renew certificate
certbot renew --quiet

# Upload new certificate to S3
aws s3 cp "$CERT_PATH/fullchain.pem" "s3://$S3_BUCKET/fullchain.pem"
aws s3 cp "$CERT_PATH/privkey.pem" "s3://$S3_BUCKET/privkey.pem"
aws s3 cp "$CERT_PATH/chain.pem" "s3://$S3_BUCKET/chain.pem"

Make it executable:

chmod +x renew_cert.sh

Schedule it with cron to run weekly:

echo "0 0 * * 1 /path/to/renew_cert.sh" | sudo tee -a /etc/crontab

Step 3: Create an IAM Role for Lambda
	1.	Go to AWS IAM Console → Roles → Create Role.
	2.	Choose AWS Lambda.
	3.	Attach AmazonS3ReadOnlyAccess and AWSCertificateManagerFullAccess.
	4.	Attach a custom inline policy for IAM permissions to replace the certificate:

{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "acm:ImportCertificate",
        "acm:ListCertificates",
        "acm:DescribeCertificate",
        "acm:DeleteCertificate"
      ],
      "Resource": "*"
    }
  ]
}


	5.	Name the role LambdaCertbotRole.

Step 4: Create a Lambda Function
	1.	Go to AWS Lambda → Create Function.
	2.	Choose Author from scratch:
	•	Name: UpdateACMCert
	•	Runtime: Python 3.9
	•	Role: LambdaCertbotRole
	3.	Upload Python Code:
	•	Open the Code editor and paste this:

import boto3
import os

S3_BUCKET = "your-s3-bucket"
CERT_ARN = "arn:aws:acm:your-region:your-account-id:certificate/your-certificate-id"

s3 = boto3.client("s3")
acm = boto3.client("acm", region_name="your-region")

def lambda_handler(event, context):
    # Download certificate files from S3
    cert_file = "/tmp/fullchain.pem"
    key_file = "/tmp/privkey.pem"
    chain_file = "/tmp/chain.pem"

    s3.download_file(S3_BUCKET, "fullchain.pem", cert_file)
    s3.download_file(S3_BUCKET, "privkey.pem", key_file)
    s3.download_file(S3_BUCKET, "chain.pem", chain_file)

    # Read the certificate files
    with open(cert_file, "r") as cert, open(key_file, "r") as key, open(chain_file, "r") as chain:
        cert_body = cert.read()
        key_body = key.read()
        chain_body = chain.read()

    # Update ACM Certificate
    response = acm.import_certificate(
        CertificateArn=CERT_ARN,
        Certificate=cert_body,
        PrivateKey=key_body,
        CertificateChain=chain_body
    )

    return {"status": "success", "message": "Certificate updated", "response": response}

	4.	Set Environment Variables:
	•	S3_BUCKET = your-s3-bucket
	•	CERT_ARN = your ACM certificate ARN
	•	AWS_REGION = your-region
	5.	Increase Timeout (to 30 seconds).

Step 5: Schedule Lambda with CloudWatch
	1.	Go to Amazon EventBridge → Create Rule.
	2.	Select Schedule Rule and set it to run every week.
	3.	Target: AWS Lambda function → UpdateACMCert.

Step 6: Attach the ACM Certificate to AWS Load Balancer

If your ALB is not using this certificate yet:

aws elbv2 modify-listener \
  --listener-arn arn:aws:elasticloadbalancing:your-region:your-account-id:listener/app/your-lb \
  --certificates CertificateArn=arn:aws:acm:your-region:your-account-id:certificate/your-certificate-id

Done!

Now:
	1.	Certbot renews the certificate weekly on EC2.
	2.	Uploads it to S3.
	3.	Lambda updates the ACM certificate automatically.
	4.	ALB/NLB uses the latest SSL certificate.

Would you like help testing the Lambda function?

To test the Lambda function that updates the ACM certificate, follow these steps:

Step 1: Manually Upload a Test Certificate to S3

Before testing the Lambda function, ensure that the required certificate files exist in your S3 bucket. If your EC2 instance has already uploaded the renewed certificates, you can verify them by running:

aws s3 ls s3://your-s3-bucket/

If the files are missing, manually upload them:

aws s3 cp /etc/letsencrypt/live/example.com/fullchain.pem s3://your-s3-bucket/fullchain.pem
aws s3 cp /etc/letsencrypt/live/example.com/privkey.pem s3://your-s3-bucket/privkey.pem
aws s3 cp /etc/letsencrypt/live/example.com/chain.pem s3://your-s3-bucket/chain.pem

Step 2: Test Lambda Locally (Optional)

If you have AWS SAM CLI or Python Boto3 installed, you can test the function locally by simulating an event:
	1.	Install dependencies:

pip install boto3


	2.	Create a test script (test_lambda.py):

import lambda_function

event = {}
context = {}

print(lambda_function.lambda_handler(event, context))


	3.	Run the test:

python test_lambda.py



If the function works correctly, it should return:

{"status": "success", "message": "Certificate updated", "response": { ... }}

Step 3: Test Lambda in AWS Console
	1.	Go to AWS Lambda → Functions → UpdateACMCert.
	2.	Click Test.
	3.	Select Create a new test event → Name it TestACMUpdate.
	4.	Use an empty JSON event {}.
	5.	Click Invoke.

Expected Output:
	•	If successful:

{
  "status": "success",
  "message": "Certificate updated",
  "response": { ... }
}


	•	If there’s an error, check CloudWatch Logs under:

/aws/lambda/UpdateACMCert

Step 4: Verify the Certificate Update in ACM

After running the Lambda function:
	1.	Go to AWS ACM Console.
	2.	Find your certificate (arn:aws:acm:your-region:your-account-id:certificate/your-certificate-id).
	3.	Check the Not Before date—this should match the renewed certificate.

Step 5: Verify Load Balancer is Using the New Certificate

If your ALB is using ACM, ensure it is correctly attached:

aws elbv2 describe-listeners --load-balancer-arn arn:aws:elasticloadbalancing:your-region:your-account-id:loadbalancer/app/your-lb

If the certificate isn’t updated, manually apply it:

aws elbv2 modify-listener \
  --listener-arn arn:aws:elasticloadbalancing:your-region:your-account-id:listener/app/your-lb \
  --certificates CertificateArn=arn:aws:acm:your-region:your-account-id:certificate/your-certificate-id

Troubleshooting
	•	S3 Permission Errors: Ensure Lambda’s IAM role has s3:GetObject permissions.
	•	ACM Errors: Ensure the certificate ARN is correct and Lambda has acm:ImportCertificate permissions.
	•	Lambda Timeout: Increase the timeout to 30 seconds.

Next Steps
	•	If everything works, let the automation run on schedule.
	•	If needed, create an EventBridge Rule to trigger Lambda every week.

Would you like help debugging any specific errors?


