To create a PostgreSQL database on AWS using Terraform with an existing VPC and subnets, you need to modify the scripts to use the IDs of your existing resources. Here's an example of how you can do it:

### Step 1: Provider Configuration
First, configure the AWS provider.

```hcl
# provider.tf
provider "aws" {
  region = "us-west-2" # Change to your preferred region
}
```

### Step 2: Variables
Define variables for your existing VPC and subnets.

```hcl
# variables.tf
variable "vpc_id" {
  description = "The ID of the existing VPC"
  type        = string
}

variable "subnet_ids" {
  description = "A list of subnet IDs for the RDS instance"
  type        = list(string)
}
```

### Step 3: Security Group
Create a security group for the PostgreSQL instance within the existing VPC.

```hcl
# security_group.tf
resource "aws_security_group" "allow_postgres" {
  vpc_id = var.vpc_id

  ingress {
    from_port   = 5432
    to_port     = 5432
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"] # Adjust this to be more restrictive based on your security needs
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "allow_postgres"
  }
}
```

### Step 4: RDS Instance
Create the RDS PostgreSQL instance using the existing VPC and subnets.

```hcl
# rds.tf
resource "aws_db_instance" "postgres" {
  allocated_storage    = 20
  engine               = "postgres"
  engine_version       = "13.3"
  instance_class       = "db.t3.micro"
  name                 = "mydatabase"
  username             = "postgres"
  password             = "mypassword"
  parameter_group_name = "default.postgres13"
  skip_final_snapshot  = true

  vpc_security_group_ids = [aws_security_group.allow_postgres.id]
  db_subnet_group_name   = aws_db_subnet_group.main.name

  tags = {
    Name = "my-postgres-db"
  }
}

resource "aws_db_subnet_group" "main" {
  name       = "main_subnet_group"
  subnet_ids = var.subnet_ids

  tags = {
    Name = "main_subnet_group"
  }
}
```

### Step 5: Outputs
Optionally, define outputs to get the necessary connection information.

```hcl
# outputs.tf
output "db_endpoint" {
  value = aws_db_instance.postgres.endpoint
}

output "db_username" {
  value = aws_db_instance.postgres.username
}

output "db_name" {
  value = aws_db_instance.postgres.name
}
```

### Step 6: Terraform Initialization and Apply
Initialize Terraform and apply the configuration.

```sh
terraform init
terraform apply
```

### Example Terraform Configuration File
Here is an example configuration file where you might pass the variables:

```hcl
# terraform.tfvars
vpc_id    = "vpc-12345678"  # Replace with your VPC ID
subnet_ids = ["subnet-12345678", "subnet-87654321"]  # Replace with your Subnet IDs
```

This setup ensures that your PostgreSQL database is created in an existing VPC and subnets, and it is secured using a security group that allows PostgreSQL traffic. Make sure to adjust the security group ingress rules to match your security requirements.
