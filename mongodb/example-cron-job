To pull or download MongoDB Atlas logs to an EC2 instance using a cron job, you can use the MongoDB Atlas API. Below is a step-by-step guide:

Prerequisites
	1.	MongoDB Atlas API Key:
	•	Create an API key with appropriate permissions (e.g., Project Read-Only or higher).
	•	Note the Public Key, Private Key, and Project ID.
	2.	Install Required Tools:
	•	Install curl or another HTTP client on your EC2 instance.
	•	Ensure the instance has internet access to communicate with the MongoDB Atlas API.
	3.	Set Up Secure Storage:
	•	Store the API keys securely, e.g., in AWS Secrets Manager, or as environment variables in your EC2 instance.

Script to Download Logs

Below is a sample Bash script to pull MongoDB Atlas logs and save them to a file on the EC2 instance:

#!/bin/bash

# MongoDB Atlas API details
API_PUBLIC_KEY="<your_public_key>"
API_PRIVATE_KEY="<your_private_key>"
PROJECT_ID="<your_project_id>"
CLUSTER_NAME="<your_cluster_name>"
OUTPUT_DIR="/path/to/logs" # Directory to save logs
DATE=$(date '+%Y-%m-%d')  # Date for log filename

# Create output directory if it doesn't exist
mkdir -p "$OUTPUT_DIR"

# Generate the Base64-encoded API key for Basic Auth
AUTH=$(echo -n "$API_PUBLIC_KEY:$API_PRIVATE_KEY" | base64)

# API Endpoint for logs
LOGS_URL="https://cloud.mongodb.com/api/atlas/v1.0/groups/$PROJECT_ID/clusters/$CLUSTER_NAME/logs/mongodb.gz"

# Download logs
curl -s -X GET "$LOGS_URL" \
  -H "Authorization: Basic $AUTH" \
  --output "$OUTPUT_DIR/mongodb-logs-$DATE.gz"

# Check if download was successful
if [ $? -eq 0 ]; then
  echo "Logs downloaded successfully: $OUTPUT_DIR/mongodb-logs-$DATE.gz"
else
  echo "Failed to download logs"
  exit 1
fi

Set Up Cron Job
	1.	Edit the Crontab:
Run the following command:

crontab -e


	2.	Add a Cron Job:
Schedule the script to run at the desired interval (e.g., daily at midnight):

0 0 * * * /bin/bash /path/to/your-script.sh >> /var/log/mongodb-log-download.log 2>&1


	3.	Save and Exit.

Verify
	1.	Confirm the cron job is running:

crontab -l


	2.	Check logs in the specified output directory:

ls /path/to/logs

Additional Notes
	•	IAM Role (Optional): Use an IAM role for the EC2 instance to access AWS services securely (if uploading logs to S3, for example).
	•	Security: Avoid hardcoding sensitive credentials directly in scripts. Use AWS Secrets Manager or environment variables for better security.
	•	Log Rotation: Implement a cleanup mechanism to manage disk space (e.g., delete logs older than a specific duration).